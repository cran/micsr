// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gauss_laguerre
List gauss_laguerre(int N);
RcppExport SEXP _micsr_gauss_laguerre(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_laguerre(N));
    return rcpp_result_gen;
END_RCPP
}
// gauss_hermite
List gauss_hermite(int N);
RcppExport SEXP _micsr_gauss_hermite(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_hermite(N));
    return rcpp_result_gen;
END_RCPP
}
// punorm0
double punorm0(double x);
RcppExport SEXP _micsr_punorm0(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(punorm0(x));
    return rcpp_result_gen;
END_RCPP
}
// pbnorm0
double pbnorm0(double h1, double h2, double rho);
RcppExport SEXP _micsr_pbnorm0(SEXP h1SEXP, SEXP h2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbnorm0(h1, h2, rho));
    return rcpp_result_gen;
END_RCPP
}
// ptnorm0
double ptnorm0(double z1, double z2, double z3, double rho12, double rho13, double rho23);
RcppExport SEXP _micsr_ptnorm0(SEXP z1SEXP, SEXP z2SEXP, SEXP z3SEXP, SEXP rho12SEXP, SEXP rho13SEXP, SEXP rho23SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< double >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< double >::type z3(z3SEXP);
    Rcpp::traits::input_parameter< double >::type rho12(rho12SEXP);
    Rcpp::traits::input_parameter< double >::type rho13(rho13SEXP);
    Rcpp::traits::input_parameter< double >::type rho23(rho23SEXP);
    rcpp_result_gen = Rcpp::wrap(ptnorm0(z1, z2, z3, rho12, rho13, rho23));
    return rcpp_result_gen;
END_RCPP
}
// punorm
NumericVector punorm(NumericVector z);
RcppExport SEXP _micsr_punorm(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(punorm(z));
    return rcpp_result_gen;
END_RCPP
}
// pbnorm
NumericVector pbnorm(NumericVector z1, NumericVector z2, NumericVector rho);
RcppExport SEXP _micsr_pbnorm(SEXP z1SEXP, SEXP z2SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pbnorm(z1, z2, rho));
    return rcpp_result_gen;
END_RCPP
}
// ptnormv
NumericVector ptnormv(NumericVector z1, NumericVector z2, NumericVector z3, NumericVector rho12, NumericVector rho13, NumericVector rho23);
RcppExport SEXP _micsr_ptnormv(SEXP z1SEXP, SEXP z2SEXP, SEXP z3SEXP, SEXP rho12SEXP, SEXP rho13SEXP, SEXP rho23SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z3(z3SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho12(rho12SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho13(rho13SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho23(rho23SEXP);
    rcpp_result_gen = Rcpp::wrap(ptnormv(z1, z2, z3, rho12, rho13, rho23));
    return rcpp_result_gen;
END_RCPP
}
// ptnorm
NumericVector ptnorm(NumericMatrix z, NumericMatrix rho);
RcppExport SEXP _micsr_ptnorm(SEXP zSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(ptnorm(z, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_micsr_gauss_laguerre", (DL_FUNC) &_micsr_gauss_laguerre, 1},
    {"_micsr_gauss_hermite", (DL_FUNC) &_micsr_gauss_hermite, 1},
    {"_micsr_punorm0", (DL_FUNC) &_micsr_punorm0, 1},
    {"_micsr_pbnorm0", (DL_FUNC) &_micsr_pbnorm0, 3},
    {"_micsr_ptnorm0", (DL_FUNC) &_micsr_ptnorm0, 6},
    {"_micsr_punorm", (DL_FUNC) &_micsr_punorm, 1},
    {"_micsr_pbnorm", (DL_FUNC) &_micsr_pbnorm, 3},
    {"_micsr_ptnormv", (DL_FUNC) &_micsr_ptnormv, 6},
    {"_micsr_ptnorm", (DL_FUNC) &_micsr_ptnorm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_micsr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
